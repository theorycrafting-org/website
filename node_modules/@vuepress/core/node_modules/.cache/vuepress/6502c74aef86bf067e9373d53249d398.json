{"remainingRequest":"D:\\vp2\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\vp2\\pages\\.vuepress\\theme\\util\\index.js","dependencies":[{"path":"D:\\vp2\\pages\\.vuepress\\theme\\util\\index.js","mtime":1547948817105},{"path":"D:\\vp2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547842182214},{"path":"D:\\vp2\\node_modules\\babel-loader\\lib\\index.js","mtime":1547849720006}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.index-of\";\nimport _Array$isArray from \"D:\\\\vp2\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/array/is-array\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _Object$assign from \"D:\\\\vp2\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/assign\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.replace\";\nexport var hashRE = /#.*$/;\nexport var extRE = /\\.(md|html)$/;\nexport var endingSlashRE = /\\/$/;\nexport var outboundRE = /^(https?:|mailto:|tel:)/;\nexport function normalize(path) {\n  return decodeURI(path).replace(hashRE, '').replace(extRE, '');\n}\nexport function getHash(path) {\n  var match = path.match(hashRE);\n\n  if (match) {\n    return match[0];\n  }\n}\nexport function isExternal(path) {\n  return outboundRE.test(path);\n}\nexport function isMailto(path) {\n  return /^mailto:/.test(path);\n}\nexport function isTel(path) {\n  return /^tel:/.test(path);\n}\nexport function ensureExt(path) {\n  if (isExternal(path)) {\n    return path;\n  }\n\n  var hashMatch = path.match(hashRE);\n  var hash = hashMatch ? hashMatch[0] : '';\n  var normalized = normalize(path);\n\n  if (endingSlashRE.test(normalized)) {\n    return path;\n  }\n\n  return normalized + '.html' + hash;\n}\nexport function isActive(route, path) {\n  var routeHash = route.hash;\n  var linkHash = getHash(path);\n\n  if (linkHash && routeHash !== linkHash) {\n    return false;\n  }\n\n  var routePath = normalize(route.path);\n  var pagePath = normalize(path);\n  return routePath === pagePath;\n}\nexport function resolvePage(pages, rawPath, base) {\n  if (base) {\n    rawPath = resolvePath(rawPath, base);\n  }\n\n  var path = normalize(rawPath);\n\n  for (var i = 0; i < pages.length; i++) {\n    if (normalize(pages[i].regularPath) === path) {\n      return _Object$assign({}, pages[i], {\n        type: 'page',\n        path: ensureExt(pages[i].path)\n      });\n    }\n  }\n\n  console.error(\"[vuepress] No matching page found for sidebar item \\\"\".concat(rawPath, \"\\\"\"));\n  return {};\n}\n\nfunction resolvePath(relative, base, append) {\n  var firstChar = relative.charAt(0);\n\n  if (firstChar === '/') {\n    return relative;\n  }\n\n  if (firstChar === '?' || firstChar === '#') {\n    return base + relative;\n  }\n\n  var stack = base.split('/'); // remove trailing segment if:\n  // - not appending\n  // - appending to trailing slash (last segment is empty)\n\n  if (!append || !stack[stack.length - 1]) {\n    stack.pop();\n  } // resolve relative path\n\n\n  var segments = relative.replace(/^\\//, '').split('/');\n\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n\n    if (segment === '..') {\n      stack.pop();\n    } else if (segment !== '.') {\n      stack.push(segment);\n    }\n  } // ensure leading slash\n\n\n  if (stack[0] !== '') {\n    stack.unshift('');\n  }\n\n  return stack.join('/');\n}\n/**\n * @param { Page } page\n * @param { string } regularPath\n * @param { SiteData } site\n * @param { string } localePath\n * @returns { SidebarGroup }\n */\n\n\nexport function resolveSidebarItems(page, regularPath, site, localePath) {\n  var pages = site.pages,\n      themeConfig = site.themeConfig;\n  var localeConfig = localePath && themeConfig.locales ? themeConfig.locales[localePath] || themeConfig : themeConfig;\n  var pageSidebarConfig = page.frontmatter.sidebar || localeConfig.sidebar || themeConfig.sidebar;\n\n  if (pageSidebarConfig === 'auto') {\n    return resolveHeaders(page);\n  }\n\n  var sidebarConfig = localeConfig.sidebar || themeConfig.sidebar;\n\n  if (!sidebarConfig) {\n    return [];\n  } else {\n    var _resolveMatchingConfi = resolveMatchingConfig(regularPath, sidebarConfig),\n        base = _resolveMatchingConfi.base,\n        config = _resolveMatchingConfi.config;\n\n    return config ? config.map(function (item) {\n      return resolveItem(item, pages, base);\n    }) : [];\n  }\n}\n/**\n * @param { Page } page\n * @returns { SidebarGroup }\n */\n\nfunction resolveHeaders(page) {\n  var headers = groupHeaders(page.headers || []);\n  return [{\n    type: 'group',\n    collapsable: false,\n    title: page.title,\n    children: headers.map(function (h) {\n      return {\n        type: 'auto',\n        title: h.title,\n        basePath: page.path,\n        path: page.path + '#' + h.slug,\n        children: h.children || []\n      };\n    })\n  }];\n}\n\nexport function groupHeaders(headers) {\n  // group h3s under h2\n  headers = headers.map(function (h) {\n    return _Object$assign({}, h);\n  });\n  var lastH2;\n  headers.forEach(function (h) {\n    if (h.level === 2) {\n      lastH2 = h;\n    } else if (lastH2) {\n      (lastH2.children || (lastH2.children = [])).push(h);\n    }\n  });\n  return headers.filter(function (h) {\n    return h.level === 2;\n  });\n}\nexport function resolveNavLinkItem(linkItem) {\n  return _Object$assign(linkItem, {\n    type: linkItem.items && linkItem.items.length ? 'links' : 'link'\n  });\n}\n/**\n * @param { Route } route\n * @param { Array<string|string[]> | Array<SidebarGroup> | [link: string]: SidebarConfig } config\n * @returns { base: string, config: SidebarConfig }\n */\n\nexport function resolveMatchingConfig(regularPath, config) {\n  if (_Array$isArray(config)) {\n    return {\n      base: '/',\n      config: config\n    };\n  }\n\n  for (var base in config) {\n    if (ensureEndingSlash(regularPath).indexOf(base) === 0) {\n      return {\n        base: base,\n        config: config[base]\n      };\n    }\n  }\n\n  return {};\n}\n\nfunction ensureEndingSlash(path) {\n  return /(\\.html|\\/)$/.test(path) ? path : path + '/';\n}\n\nfunction resolveItem(item, pages, base, isNested) {\n  if (typeof item === 'string') {\n    return resolvePage(pages, item, base);\n  } else if (_Array$isArray(item)) {\n    return _Object$assign(resolvePage(pages, item[0], base), {\n      title: item[1]\n    });\n  } else {\n    if (isNested) {\n      console.error('[vuepress] Nested sidebar groups are not supported. ' + 'Consider using navbar + categories instead.');\n    }\n\n    var children = item.children || [];\n    return {\n      type: 'group',\n      title: item.title,\n      children: children.map(function (child) {\n        return resolveItem(child, pages, base, true);\n      }),\n      collapsable: item.collapsable !== false\n    };\n  }\n}",null]}