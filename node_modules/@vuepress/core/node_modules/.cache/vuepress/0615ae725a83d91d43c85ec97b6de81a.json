{"remainingRequest":"D:\\vp2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vp2\\pages\\.vuepress\\theme\\components\\NavLinks.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\vp2\\pages\\.vuepress\\theme\\components\\NavLinks.vue","mtime":1548507684797},{"path":"D:\\vp2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547842182214},{"path":"D:\\vp2\\node_modules\\babel-loader\\lib\\index.js","mtime":1547849720006},{"path":"D:\\vp2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547842182214},{"path":"D:\\vp2\\node_modules\\vue-loader\\lib\\index.js","mtime":1547842183433}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport DropdownLink from './DropdownLink.vue'\nimport { resolveNavLinkItem } from '../util'\nimport NavLink from './NavLink.vue'\n\nexport default {\n\n  data: () => ({\n    isMobile: false,\n    isOpen: false\n  }),\n\n  beforeDestroy() {\n    window.removeEventListener('resize', this.evt_resize);\n  },\n\n  mounted() {\n    const handleWidth = () => {\n      if (document.documentElement.clientWidth < 576 && this.$data.isMobile == false) {\n        this.$set(this.$data, 'isMobile', true);\n      }\n      if (document.documentElement.clientWidth > 576 && this.$data.isMobile == true) {\n        this.$set(this.$data, 'isMobile', false);\n      }\n    };\n    handleWidth();\n    window.addEventListener('resize', handleWidth, false);\n  },\n\n  components: { NavLink, DropdownLink },\n\n  methods: {\n    toggleResponsiveMenu(e) {\n      e.preventDefault();\n      if (!this.$data.isMobile) return;\n      this.$set(this.$data, \"isOpen\", !this.$data.isOpen);\n    }\n  },\n  computed: {\n    userNav () {\n      return this.$themeLocaleConfig.nav || this.$site.themeConfig.nav || []\n    },\n\n    nav () {\n      const { locales } = this.$site\n      if (locales && Object.keys(locales).length > 1) {\n        const currentLink = this.$page.path\n        const routes = this.$router.options.routes\n        const themeLocales = this.$site.themeConfig.locales || {}\n        const languageDropdown = {\n          text: this.$themeLocaleConfig.selectText || 'Languages',\n          items: Object.keys(locales).map(path => {\n            const locale = locales[path]\n            const text = themeLocales[path] && themeLocales[path].label || locale.lang\n            let link\n            // Stay on the current page\n            if (locale.lang === this.$lang) {\n              link = currentLink\n            } else {\n              // Try to stay on the same page\n              link = currentLink.replace(this.$localeConfig.path, path)\n              // fallback to homepage\n              if (!routes.some(route => route.path === link)) {\n                link = path\n              }\n            }\n            return { text, link }\n          })\n        }\n        return [...this.userNav, languageDropdown]\n      }\n      return this.userNav\n    },\n\n    userLinks () {\n      return (this.nav || []).map(link => {\n        return Object.assign(resolveNavLinkItem(link), {\n          items: (link.items || []).map(resolveNavLinkItem)\n        })\n      })\n    },\n\n    repoLink () {\n      const { repo } = this.$site.themeConfig\n      if (repo) {\n        return /^https?:/.test(repo)\n          ? repo\n          : `https://github.com/${repo}`\n      }\n    },\n\n    repoLabel () {\n      if (!this.repoLink) return\n      if (this.$site.themeConfig.repoLabel) {\n        return this.$site.themeConfig.repoLabel\n      }\n\n      const repoHost = this.repoLink.match(/^https?:\\/\\/[^/]+/)[0]\n      const platforms = ['GitHub', 'GitLab', 'Bitbucket']\n      for (let i = 0; i < platforms.length; i++) {\n        const platform = platforms[i]\n        if (new RegExp(platform, 'i').test(repoHost)) {\n          return platform\n        }\n      }\n\n      return 'Source'\n    }\n  }\n}\n",{"version":3,"sources":["NavLinks.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"NavLinks.vue","sourceRoot":"pages\\.vuepress\\theme\\components","sourcesContent":["<template>\n  <div class=\"nav-link-container\" :class=\"{ 'responsive-nav-container': isMobile, 'responsive-nav-open': isOpen }\">\n    <div class=\"responsive-toggle\">\n      <button @click=\"toggleResponsiveMenu\" class=\"menu-open\">V</button>\n    </div>\n    <nav\n      class=\"nav-links\"\n      v-if=\"userLinks.length || repoLink\"\n    >\n      <ul>\n        <li\n          class=\"nav-item\"\n          v-for=\"item in userLinks\"\n          :key=\"item.link\"\n        >\n          <DropdownLink\n            v-if=\"item.type === 'links'\"\n            :item=\"item\"\n          />\n          <NavLink\n            v-else\n            :item=\"item\"\n          />\n        </li>\n      </ul>\n    </nav>\n  </div>\n</template>\n\n<script>\nimport DropdownLink from './DropdownLink.vue'\nimport { resolveNavLinkItem } from '../util'\nimport NavLink from './NavLink.vue'\n\nexport default {\n\n  data: () => ({\n    isMobile: false,\n    isOpen: false\n  }),\n\n  beforeDestroy() {\n    window.removeEventListener('resize', this.evt_resize);\n  },\n\n  mounted() {\n    const handleWidth = () => {\n      if (document.documentElement.clientWidth < 576 && this.$data.isMobile == false) {\n        this.$set(this.$data, 'isMobile', true);\n      }\n      if (document.documentElement.clientWidth > 576 && this.$data.isMobile == true) {\n        this.$set(this.$data, 'isMobile', false);\n      }\n    };\n    handleWidth();\n    window.addEventListener('resize', handleWidth, false);\n  },\n\n  components: { NavLink, DropdownLink },\n\n  methods: {\n    toggleResponsiveMenu(e) {\n      e.preventDefault();\n      if (!this.$data.isMobile) return;\n      this.$set(this.$data, \"isOpen\", !this.$data.isOpen);\n    }\n  },\n  computed: {\n    userNav () {\n      return this.$themeLocaleConfig.nav || this.$site.themeConfig.nav || []\n    },\n\n    nav () {\n      const { locales } = this.$site\n      if (locales && Object.keys(locales).length > 1) {\n        const currentLink = this.$page.path\n        const routes = this.$router.options.routes\n        const themeLocales = this.$site.themeConfig.locales || {}\n        const languageDropdown = {\n          text: this.$themeLocaleConfig.selectText || 'Languages',\n          items: Object.keys(locales).map(path => {\n            const locale = locales[path]\n            const text = themeLocales[path] && themeLocales[path].label || locale.lang\n            let link\n            // Stay on the current page\n            if (locale.lang === this.$lang) {\n              link = currentLink\n            } else {\n              // Try to stay on the same page\n              link = currentLink.replace(this.$localeConfig.path, path)\n              // fallback to homepage\n              if (!routes.some(route => route.path === link)) {\n                link = path\n              }\n            }\n            return { text, link }\n          })\n        }\n        return [...this.userNav, languageDropdown]\n      }\n      return this.userNav\n    },\n\n    userLinks () {\n      return (this.nav || []).map(link => {\n        return Object.assign(resolveNavLinkItem(link), {\n          items: (link.items || []).map(resolveNavLinkItem)\n        })\n      })\n    },\n\n    repoLink () {\n      const { repo } = this.$site.themeConfig\n      if (repo) {\n        return /^https?:/.test(repo)\n          ? repo\n          : `https://github.com/${repo}`\n      }\n    },\n\n    repoLabel () {\n      if (!this.repoLink) return\n      if (this.$site.themeConfig.repoLabel) {\n        return this.$site.themeConfig.repoLabel\n      }\n\n      const repoHost = this.repoLink.match(/^https?:\\/\\/[^/]+/)[0]\n      const platforms = ['GitHub', 'GitLab', 'Bitbucket']\n      for (let i = 0; i < platforms.length; i++) {\n        const platform = platforms[i]\n        if (new RegExp(platform, 'i').test(repoHost)) {\n          return platform\n        }\n      }\n\n      return 'Source'\n    }\n  }\n}\n</script>\n"]}]}