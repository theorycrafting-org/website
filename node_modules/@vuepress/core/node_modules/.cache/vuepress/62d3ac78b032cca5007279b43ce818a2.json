{"remainingRequest":"D:\\vp2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vp2\\pages\\.vuepress\\theme\\components\\SearchBox.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\vp2\\pages\\.vuepress\\theme\\components\\SearchBox.vue","mtime":1550324087157},{"path":"D:\\vp2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547842182214},{"path":"D:\\vp2\\node_modules\\babel-loader\\lib\\index.js","mtime":1547849720006},{"path":"D:\\vp2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547842182214},{"path":"D:\\vp2\\node_modules\\vue-loader\\lib\\index.js","mtime":1547842183433}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n\r\nimport queryIndex from '@dynamic/es';\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      query: '',\r\n      focusIndex: null,\r\n      isFocus: false,\r\n      isOpen: false,\r\n      suggestionsOpen: false,\r\n      isMobile: false\r\n    }\r\n  },\r\n  methods: {\r\n    search() {\r\n      if (this.showSuggestions && this.suggestions.length) {\r\n        this.$set(this.$data, 'suggestionsOpen', true);\r\n      }\r\n    },\r\n    hoverTo(idx) {\r\n      this.focusIndex = idx;\r\n    },\r\n    onUp () {\r\n      if (this.showSuggestions) {\r\n        if (this.focusIndex > 0) {\r\n          this.focusIndex--\r\n        } else {\r\n          this.focusIndex = this.suggestions.length - 1\r\n        }\r\n      }\r\n    },\r\n    onDown () {\r\n      if (this.showSuggestions) {\r\n        if (this.focusIndex < this.suggestions.length - 1) {\r\n          this.focusIndex++\r\n        } else {\r\n          this.focusIndex = 0\r\n        }\r\n      }\r\n    },\r\n    toggleBlur (e) {\r\n      if (this.$data.isMobile) {\r\n        this.$set(this.$data, 'isOpen', false);\r\n      }\r\n      this.$set(this.$data, 'isFocus', false);\r\n      \r\n        this.$set(this.$data, 'suggestionsOpen', false);\r\n    },\r\n    toggleFocus (e) {\r\n      this.$set(this.$data, 'isFocus', true);\r\n    },\r\n    go(idx) {\r\n      this.$router.push(this.suggestions[idx].url);\r\n    },\r\n    performSearchButtonAction (e) {\r\n      e.preventDefault();\r\n      if (!this.$data.isOpen && this.$data.isMobile) {\r\n        this.$set(this.$data, 'isOpen', true);\r\n        this.$set(this.$data, 'isFocus', true);\r\n        this.$refs['searchbox'].focus();\r\n        return;\r\n      }\r\n      if (this.$refs['searchbox'].value.length < 1) return;\r\n      // Actual search\r\n      this.$router.push('/search?q='+encodeURIComponent(this.$refs['searchbox'].value));\r\n    }\r\n  },\r\n\r\n  beforeDestroy() {\r\n    window.removeEventListener('resize', this.evt_resize);\r\n  },\r\n  computed: {\r\n    showSuggestions () {\r\n      return (\r\n        this.isFocus &&\r\n        this.suggestions &&\r\n        this.suggestions.length\r\n      )\r\n    },\r\n    suggestions () {\r\n      const query = this.query;\r\n      if (!query) {\r\n        return\r\n      }\r\n      return [];\r\n      return queryIndex(query);\r\n    }\r\n  },\r\n  mounted() {\r\n    const handleWidth = () => {\r\n      if (document.documentElement.clientWidth < 576 && this.$data.isMobile == false) {\r\n        this.$set(this.$data, 'isMobile', true);\r\n      }\r\n      if (document.documentElement.clientWidth > 576 && this.$data.isMobile == true) {\r\n        this.$set(this.$data, 'isMobile', false);\r\n      }\r\n    };\r\n    handleWidth();\r\n    window.addEventListener('resize', handleWidth, false);\r\n  }\r\n}\r\n\r\n",{"version":3,"sources":["SearchBox.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SearchBox.vue","sourceRoot":"pages\\.vuepress\\theme\\components","sourcesContent":["<template>\r\n<div class=\"search-box\">\r\n  <input :class=\"{'search-box-open': isOpen}\" v-bind:ref=\"'searchbox'\"  @keyup.enter=\"go(focusIndex)\" @keyup.up=\"onUp\" @keyup=\"search\" @keyup.down=\"onDown\" @blur=\"toggleBlur\" @focus=\"toggleFocus\" v-model=\"query\" type=\"text\" placeholder=\"Search...\" />\r\n  <button class=\"icon\" @click=\"performSearchButtonAction\"><i class=\"fa fa-search\"></i></button>\r\n  <ul class=\"suggestions\" :class=\"{'visible': suggestionsOpen}\">\r\n    <li v-for=\"(item, idx) in suggestions\" :key=\"item.url\"><a @mouseover=\"hoverTo(idx)\" :class=\"{'suggestion-highlight': idx == focusIndex}\" :href=\"item.url\">{{item.title}}</a></li>\r\n  </ul>\r\n</div>\r\n</template>\r\n<script>\r\n\r\nimport queryIndex from '@dynamic/es';\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      query: '',\r\n      focusIndex: null,\r\n      isFocus: false,\r\n      isOpen: false,\r\n      suggestionsOpen: false,\r\n      isMobile: false\r\n    }\r\n  },\r\n  methods: {\r\n    search() {\r\n      if (this.showSuggestions && this.suggestions.length) {\r\n        this.$set(this.$data, 'suggestionsOpen', true);\r\n      }\r\n    },\r\n    hoverTo(idx) {\r\n      this.focusIndex = idx;\r\n    },\r\n    onUp () {\r\n      if (this.showSuggestions) {\r\n        if (this.focusIndex > 0) {\r\n          this.focusIndex--\r\n        } else {\r\n          this.focusIndex = this.suggestions.length - 1\r\n        }\r\n      }\r\n    },\r\n    onDown () {\r\n      if (this.showSuggestions) {\r\n        if (this.focusIndex < this.suggestions.length - 1) {\r\n          this.focusIndex++\r\n        } else {\r\n          this.focusIndex = 0\r\n        }\r\n      }\r\n    },\r\n    toggleBlur (e) {\r\n      if (this.$data.isMobile) {\r\n        this.$set(this.$data, 'isOpen', false);\r\n      }\r\n      this.$set(this.$data, 'isFocus', false);\r\n      \r\n        this.$set(this.$data, 'suggestionsOpen', false);\r\n    },\r\n    toggleFocus (e) {\r\n      this.$set(this.$data, 'isFocus', true);\r\n    },\r\n    go(idx) {\r\n      this.$router.push(this.suggestions[idx].url);\r\n    },\r\n    performSearchButtonAction (e) {\r\n      e.preventDefault();\r\n      if (!this.$data.isOpen && this.$data.isMobile) {\r\n        this.$set(this.$data, 'isOpen', true);\r\n        this.$set(this.$data, 'isFocus', true);\r\n        this.$refs['searchbox'].focus();\r\n        return;\r\n      }\r\n      if (this.$refs['searchbox'].value.length < 1) return;\r\n      // Actual search\r\n      this.$router.push('/search?q='+encodeURIComponent(this.$refs['searchbox'].value));\r\n    }\r\n  },\r\n\r\n  beforeDestroy() {\r\n    window.removeEventListener('resize', this.evt_resize);\r\n  },\r\n  computed: {\r\n    showSuggestions () {\r\n      return (\r\n        this.isFocus &&\r\n        this.suggestions &&\r\n        this.suggestions.length\r\n      )\r\n    },\r\n    suggestions () {\r\n      const query = this.query;\r\n      if (!query) {\r\n        return\r\n      }\r\n      return [];\r\n      return queryIndex(query);\r\n    }\r\n  },\r\n  mounted() {\r\n    const handleWidth = () => {\r\n      if (document.documentElement.clientWidth < 576 && this.$data.isMobile == false) {\r\n        this.$set(this.$data, 'isMobile', true);\r\n      }\r\n      if (document.documentElement.clientWidth > 576 && this.$data.isMobile == true) {\r\n        this.$set(this.$data, 'isMobile', false);\r\n      }\r\n    };\r\n    handleWidth();\r\n    window.addEventListener('resize', handleWidth, false);\r\n  }\r\n}\r\n\r\n</script>\r\n"]}]}