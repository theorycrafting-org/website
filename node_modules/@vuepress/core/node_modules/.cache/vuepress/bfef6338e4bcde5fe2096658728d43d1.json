{"remainingRequest":"D:\\vp2\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\vp2\\node_modules\\@vuepress\\core\\lib\\app\\serverEntry.js","dependencies":[{"path":"D:\\vp2\\node_modules\\@vuepress\\core\\lib\\app\\serverEntry.js","mtime":1549712920177},{"path":"D:\\vp2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547842182214},{"path":"D:\\vp2\\node_modules\\babel-loader\\lib\\index.js","mtime":1547849720006}],"contextDependencies":[],"result":["import _Promise from \"D:\\\\vp2\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\nimport { createApp } from './app';\nexport default (function (context) {\n  return new _Promise(function (resolve, reject) {\n    var _createApp = createApp(true\n    /* isServer */\n    ),\n        app = _createApp.app,\n        router = _createApp.router;\n\n    var url = context.url;\n    var fullPath = router.resolve(url).route.fullPath;\n\n    if (fullPath !== url) {\n      return reject({\n        url: fullPath\n      });\n    }\n\n    router.push(url);\n    router.onReady(function () {\n      return resolve(app);\n    });\n  });\n});",{"version":3,"sources":["D:\\vp2\\node_modules\\@vuepress\\core\\lib\\app\\serverEntry.js"],"names":["createApp","context","resolve","reject","app","router","url","fullPath","route","push","onReady"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,gBAAe,UAAAC,OAAO;AAAA,SAAI,aAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA,qBACjCH,SAAS,CAAC;AAAK;AAAN,KADwB;AAAA,QACjDI,GADiD,cACjDA,GADiD;AAAA,QAC5CC,MAD4C,cAC5CA,MAD4C;;AAAA,QAEjDC,GAFiD,GAEzCL,OAFyC,CAEjDK,GAFiD;AAAA,QAGjDC,QAHiD,GAGpCF,MAAM,CAACH,OAAP,CAAeI,GAAf,EAAoBE,KAHgB,CAGjDD,QAHiD;;AAKzD,QAAIA,QAAQ,KAAKD,GAAjB,EAAsB;AACpB,aAAOH,MAAM,CAAC;AAAEG,QAAAA,GAAG,EAAEC;AAAP,OAAD,CAAb;AACD;;AAEDF,IAAAA,MAAM,CAACI,IAAP,CAAYH,GAAZ;AACAD,IAAAA,MAAM,CAACK,OAAP,CAAe;AAAA,aAAMR,OAAO,CAACE,GAAD,CAAb;AAAA,KAAf;AACD,GAXyB,CAAJ;AAAA,CAAtB","sourcesContent":["import { createApp } from './app'\n\nexport default context => new Promise((resolve, reject) => {\n  const { app, router } = createApp(true /* isServer */)\n  const { url } = context\n  const { fullPath } = router.resolve(url).route\n\n  if (fullPath !== url) {\n    return reject({ url: fullPath })\n  }\n\n  router.push(url)\n  router.onReady(() => resolve(app))\n})\n"]}]}