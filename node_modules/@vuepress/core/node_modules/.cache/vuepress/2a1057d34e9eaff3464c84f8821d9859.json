{"remainingRequest":"D:\\vp2\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\vp2\\node_modules\\@vuepress\\core\\lib\\app\\redirect.js","dependencies":[{"path":"D:\\vp2\\node_modules\\@vuepress\\core\\lib\\app\\redirect.js","mtime":1549712920177},{"path":"D:\\vp2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547842182214},{"path":"D:\\vp2\\node_modules\\babel-loader\\lib\\index.js","mtime":1547849720006}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/es6.regexp.replace\";\n// In VuePress, we have following convention about routing:\n//\n//   - `/foo/` means source file is `/foo/{README|index}.md`\n//   - `/foo.html` means your source file is `/foo.md`\n//\n// The original design of VuePress relied on above two styles\n// of routing, especially the calculation involved of routes at\n// default theme. so we can't easily modify `/foo.html` directly\n// to `/foo` (i.e. remove html suffix)\n//\n// This \"temporary\" utility handles redirect of clean urls, with\n// this utility, you'll get:\n//\n// For unknown request `/foo`\n//   - redirect to `/foo.html` if it exists\n//   - redirect to `/foo/` if it exists\n//\n// For unknown request `/foo/`\n//   - redirect to `/foo.html` if it exists\n//\n// If all the above redirect rules don't exist, you'll get a 404\nexport function handleRedirectForCleanUrls(router) {\n  router.beforeEach(function (to, from, next) {\n    if (isRouteExists(router, to.path)) {\n      next();\n    } else {\n      if (!/(\\/|\\.html)$/.test(to.path)) {\n        var endingSlashUrl = to.path + '/';\n        var endingHtmlUrl = to.path + '.html';\n\n        if (isRouteExists(router, endingHtmlUrl)) {\n          next(endingHtmlUrl);\n        } else if (isRouteExists(router, endingSlashUrl)) {\n          next(endingSlashUrl);\n        } else {\n          next();\n        }\n      } else if (/\\/$/.test(to.path)) {\n        var _endingHtmlUrl = to.path.replace(/\\/$/, '') + '.html';\n\n        if (isRouteExists(router, _endingHtmlUrl)) {\n          next(_endingHtmlUrl);\n        } else {\n          next();\n        }\n      } else {\n        next();\n      }\n    }\n  });\n}\n\nfunction isRouteExists(router, path) {\n  return router.options.routes.filter(function (route) {\n    return route.path === path;\n  }).length > 0;\n}",{"version":3,"sources":["D:\\vp2\\node_modules\\@vuepress\\core\\lib\\app\\redirect.js"],"names":["handleRedirectForCleanUrls","router","beforeEach","to","from","next","isRouteExists","path","test","endingSlashUrl","endingHtmlUrl","replace","options","routes","filter","route","length"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,SAASA,0BAAT,CAAqCC,MAArC,EAA6C;AAClDA,EAAAA,MAAM,CAACC,UAAP,CAAkB,UAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,EAAoB;AACpC,QAAIC,aAAa,CAACL,MAAD,EAASE,EAAE,CAACI,IAAZ,CAAjB,EAAoC;AAClCF,MAAAA,IAAI;AACL,KAFD,MAEO;AACL,UAAI,CAAC,eAAeG,IAAf,CAAoBL,EAAE,CAACI,IAAvB,CAAL,EAAmC;AACjC,YAAME,cAAc,GAAGN,EAAE,CAACI,IAAH,GAAU,GAAjC;AACA,YAAMG,aAAa,GAAGP,EAAE,CAACI,IAAH,GAAU,OAAhC;;AACA,YAAID,aAAa,CAACL,MAAD,EAASS,aAAT,CAAjB,EAA0C;AACxCL,UAAAA,IAAI,CAACK,aAAD,CAAJ;AACD,SAFD,MAEO,IAAIJ,aAAa,CAACL,MAAD,EAASQ,cAAT,CAAjB,EAA2C;AAChDJ,UAAAA,IAAI,CAACI,cAAD,CAAJ;AACD,SAFM,MAEA;AACLJ,UAAAA,IAAI;AACL;AACF,OAVD,MAUO,IAAI,MAAMG,IAAN,CAAWL,EAAE,CAACI,IAAd,CAAJ,EAAyB;AAC9B,YAAMG,cAAa,GAAGP,EAAE,CAACI,IAAH,CAAQI,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,IAA6B,OAAnD;;AACA,YAAIL,aAAa,CAACL,MAAD,EAASS,cAAT,CAAjB,EAA0C;AACxCL,UAAAA,IAAI,CAACK,cAAD,CAAJ;AACD,SAFD,MAEO;AACLL,UAAAA,IAAI;AACL;AACF,OAPM,MAOA;AACLA,QAAAA,IAAI;AACL;AACF;AACF,GAzBD;AA0BD;;AAED,SAASC,aAAT,CAAwBL,MAAxB,EAAgCM,IAAhC,EAAsC;AACpC,SAAON,MAAM,CAACW,OAAP,CAAeC,MAAf,CAAsBC,MAAtB,CAA6B,UAAAC,KAAK;AAAA,WAAIA,KAAK,CAACR,IAAN,KAAeA,IAAnB;AAAA,GAAlC,EAA2DS,MAA3D,GAAoE,CAA3E;AACD","sourcesContent":["// In VuePress, we have following convention about routing:\n//\n//   - `/foo/` means source file is `/foo/{README|index}.md`\n//   - `/foo.html` means your source file is `/foo.md`\n//\n// The original design of VuePress relied on above two styles\n// of routing, especially the calculation involved of routes at\n// default theme. so we can't easily modify `/foo.html` directly\n// to `/foo` (i.e. remove html suffix)\n//\n// This \"temporary\" utility handles redirect of clean urls, with\n// this utility, you'll get:\n//\n// For unknown request `/foo`\n//   - redirect to `/foo.html` if it exists\n//   - redirect to `/foo/` if it exists\n//\n// For unknown request `/foo/`\n//   - redirect to `/foo.html` if it exists\n//\n// If all the above redirect rules don't exist, you'll get a 404\n\nexport function handleRedirectForCleanUrls (router) {\n  router.beforeEach((to, from, next) => {\n    if (isRouteExists(router, to.path)) {\n      next()\n    } else {\n      if (!/(\\/|\\.html)$/.test(to.path)) {\n        const endingSlashUrl = to.path + '/'\n        const endingHtmlUrl = to.path + '.html'\n        if (isRouteExists(router, endingHtmlUrl)) {\n          next(endingHtmlUrl)\n        } else if (isRouteExists(router, endingSlashUrl)) {\n          next(endingSlashUrl)\n        } else {\n          next()\n        }\n      } else if (/\\/$/.test(to.path)) {\n        const endingHtmlUrl = to.path.replace(/\\/$/, '') + '.html'\n        if (isRouteExists(router, endingHtmlUrl)) {\n          next(endingHtmlUrl)\n        } else {\n          next()\n        }\n      } else {\n        next()\n      }\n    }\n  })\n}\n\nfunction isRouteExists (router, path) {\n  return router.options.routes.filter(route => route.path === path).length > 0\n}\n"]}]}