{"remainingRequest":"D:\\vp2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vp2\\pages\\.vuepress\\theme\\layouts\\Layout.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\vp2\\pages\\.vuepress\\theme\\layouts\\Layout.vue","mtime":1550328842715},{"path":"D:\\vp2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547842182214},{"path":"D:\\vp2\\node_modules\\babel-loader\\lib\\index.js","mtime":1547849720006},{"path":"D:\\vp2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547842182214},{"path":"D:\\vp2\\node_modules\\vue-loader\\lib\\index.js","mtime":1547842183433}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Home from '../components/Home.vue'\r\nimport Navbar from '../components/Navbar.vue'\r\nimport Page from '../components/Page.vue'\r\nimport StyledContent from '../components/StyledContent.vue'\r\nimport { resolveSidebarItems } from '../util'\r\n\r\nexport default {\r\n  components: { StyledContent, Home, Page, Navbar },\r\n\r\n  data () {\r\n    return {\r\n      isSidebarOpen: false\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    background () {\r\n      if (this.$page.frontmatter.background) return \"url('\"+this.$page.frontmatter.background+\"')\";\r\n      return null;\r\n    },\r\n    shouldShowNavbar () {\r\n      const { themeConfig } = this.$site\r\n      const { frontmatter } = this.$page\r\n      if (\r\n        frontmatter.navbar === false ||\r\n        themeConfig.navbar === false) {\r\n        return false\r\n      }\r\n      return (\r\n        this.$title ||\r\n        themeConfig.logo ||\r\n        themeConfig.repo ||\r\n        themeConfig.nav ||\r\n        this.$themeLocaleConfig.nav\r\n      )\r\n    },\r\n\r\n    shouldShowSidebar () {\r\n      const { frontmatter } = this.$page\r\n      return (\r\n        !frontmatter.home &&\r\n        frontmatter.sidebar !== false &&\r\n        this.sidebarItems.length\r\n      )\r\n    },\r\n\r\n    sidebarItems () {\r\n      return resolveSidebarItems(\r\n        this.$page,\r\n        this.$page.regularPath,\r\n        this.$site,\r\n        this.$localePath\r\n      )\r\n    },\r\n\r\n    pageClasses () {\r\n      const userPageClass = this.$page.frontmatter.pageClass\r\n      return [\r\n        {\r\n          'no-navbar': !this.shouldShowNavbar,\r\n          'sidebar-open': this.isSidebarOpen,\r\n          'no-sidebar': !this.shouldShowSidebar\r\n        },\r\n        userPageClass\r\n      ]\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.$router.afterEach(() => {\r\n      this.isSidebarOpen = false\r\n    })\r\n  },\r\n\r\n  methods: {\r\n    toggleSidebar (to) {\r\n      this.isSidebarOpen = typeof to === 'boolean' ? to : !this.isSidebarOpen\r\n    },\r\n\r\n    // side swipe\r\n    onTouchStart (e) {\r\n      this.touchStart = {\r\n        x: e.changedTouches[0].clientX,\r\n        y: e.changedTouches[0].clientY\r\n      }\r\n    },\r\n\r\n    onTouchEnd (e) {\r\n      const dx = e.changedTouches[0].clientX - this.touchStart.x\r\n      const dy = e.changedTouches[0].clientY - this.touchStart.y\r\n      if (Math.abs(dx) > Math.abs(dy) && Math.abs(dx) > 40) {\r\n        if (dx > 0 && this.touchStart.x <= 80) {\r\n          this.toggleSidebar(true)\r\n        } else {\r\n          this.toggleSidebar(false)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["Layout.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Layout.vue","sourceRoot":"pages\\.vuepress\\theme\\layouts","sourcesContent":["<template>\r\n<div>\r\n  <div class=\"site-background\" :style=\"{'background-image': background}\"></div>\r\n  <div class=\"site-container\">\r\n    <Navbar\r\n      v-if=\"shouldShowNavbar\"\r\n      @toggle-sidebar=\"toggleSidebar\"\r\n    />\r\n    <Home v-if=\"$page.frontmatter.home\"/>\r\n    <StyledContent v-else/>\r\n  </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Home from '../components/Home.vue'\r\nimport Navbar from '../components/Navbar.vue'\r\nimport Page from '../components/Page.vue'\r\nimport StyledContent from '../components/StyledContent.vue'\r\nimport { resolveSidebarItems } from '../util'\r\n\r\nexport default {\r\n  components: { StyledContent, Home, Page, Navbar },\r\n\r\n  data () {\r\n    return {\r\n      isSidebarOpen: false\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    background () {\r\n      if (this.$page.frontmatter.background) return \"url('\"+this.$page.frontmatter.background+\"')\";\r\n      return null;\r\n    },\r\n    shouldShowNavbar () {\r\n      const { themeConfig } = this.$site\r\n      const { frontmatter } = this.$page\r\n      if (\r\n        frontmatter.navbar === false ||\r\n        themeConfig.navbar === false) {\r\n        return false\r\n      }\r\n      return (\r\n        this.$title ||\r\n        themeConfig.logo ||\r\n        themeConfig.repo ||\r\n        themeConfig.nav ||\r\n        this.$themeLocaleConfig.nav\r\n      )\r\n    },\r\n\r\n    shouldShowSidebar () {\r\n      const { frontmatter } = this.$page\r\n      return (\r\n        !frontmatter.home &&\r\n        frontmatter.sidebar !== false &&\r\n        this.sidebarItems.length\r\n      )\r\n    },\r\n\r\n    sidebarItems () {\r\n      return resolveSidebarItems(\r\n        this.$page,\r\n        this.$page.regularPath,\r\n        this.$site,\r\n        this.$localePath\r\n      )\r\n    },\r\n\r\n    pageClasses () {\r\n      const userPageClass = this.$page.frontmatter.pageClass\r\n      return [\r\n        {\r\n          'no-navbar': !this.shouldShowNavbar,\r\n          'sidebar-open': this.isSidebarOpen,\r\n          'no-sidebar': !this.shouldShowSidebar\r\n        },\r\n        userPageClass\r\n      ]\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.$router.afterEach(() => {\r\n      this.isSidebarOpen = false\r\n    })\r\n  },\r\n\r\n  methods: {\r\n    toggleSidebar (to) {\r\n      this.isSidebarOpen = typeof to === 'boolean' ? to : !this.isSidebarOpen\r\n    },\r\n\r\n    // side swipe\r\n    onTouchStart (e) {\r\n      this.touchStart = {\r\n        x: e.changedTouches[0].clientX,\r\n        y: e.changedTouches[0].clientY\r\n      }\r\n    },\r\n\r\n    onTouchEnd (e) {\r\n      const dx = e.changedTouches[0].clientX - this.touchStart.x\r\n      const dy = e.changedTouches[0].clientY - this.touchStart.y\r\n      if (Math.abs(dx) > Math.abs(dy) && Math.abs(dx) > 40) {\r\n        if (dx > 0 && this.touchStart.x <= 80) {\r\n          this.toggleSidebar(true)\r\n        } else {\r\n          this.toggleSidebar(false)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style type=\"scss\">\r\n@import '../scss/theme.scss';\r\n</style>\r\n"]}]}