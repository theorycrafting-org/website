{"remainingRequest":"D:\\vp2\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\vp2\\node_modules\\@vuepress\\core\\lib\\app\\root-mixins\\updateMeta.js","dependencies":[{"path":"D:\\vp2\\node_modules\\@vuepress\\core\\lib\\app\\root-mixins\\updateMeta.js","mtime":1549712920177},{"path":"D:\\vp2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547842182214},{"path":"D:\\vp2\\node_modules\\babel-loader\\lib\\index.js","mtime":1547849720006}],"contextDependencies":[],"result":["import _Object$keys from \"D:\\\\vp2\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/keys\";\nimport \"core-js/modules/es6.array.map\";\nimport _toConsumableArray from \"D:\\\\vp2\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.filter\";\nimport _Set from \"D:\\\\vp2\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/set\";\nexport default {\n  created: function created() {\n    if (this.$ssrContext) {\n      this.$ssrContext.title = this.$title;\n      this.$ssrContext.lang = this.$lang;\n      this.$ssrContext.description = this.$page.description || this.$description;\n    }\n  },\n  mounted: function mounted() {\n    // update title / meta tags\n    this.currentMetaTags = new _Set();\n    this.updateMeta();\n  },\n  methods: {\n    updateMeta: function updateMeta() {\n      var _this = this;\n\n      document.title = this.$title;\n      document.documentElement.lang = this.$lang;\n      var userMeta = this.$page.frontmatter.meta || [];\n      var meta = userMeta.slice(0);\n      var useGlobalDescription = userMeta.filter(function (m) {\n        return m.name === 'description';\n      }).length === 0; // #665 Avoid duplicate description meta at runtime.\n\n      if (useGlobalDescription) {\n        meta.push({\n          name: 'description',\n          content: this.$description\n        });\n      } // Including description meta coming from SSR.\n\n\n      var descriptionMetas = document.querySelectorAll('meta[name=\"description\"]');\n\n      if (descriptionMetas.length) {\n        descriptionMetas.forEach(function (m) {\n          return _this.currentMetaTags.add(m);\n        });\n      }\n\n      this.currentMetaTags = new _Set(updateMetaTags(meta, this.currentMetaTags));\n    }\n  },\n  watch: {\n    $page: function $page() {\n      this.updateMeta();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    updateMetaTags(null, this.currentMetaTags);\n  }\n};\n\nfunction updateMetaTags(meta, current) {\n  if (current) {\n    _toConsumableArray(current).forEach(function (c) {\n      document.head.removeChild(c);\n    });\n  }\n\n  if (meta) {\n    return meta.map(function (m) {\n      var tag = document.createElement('meta');\n\n      _Object$keys(m).forEach(function (key) {\n        tag.setAttribute(key, m[key]);\n      });\n\n      document.head.appendChild(tag);\n      return tag;\n    });\n  }\n}",{"version":3,"sources":["D:\\vp2\\node_modules\\@vuepress\\core\\lib\\app\\root-mixins\\updateMeta.js"],"names":["created","$ssrContext","title","$title","lang","$lang","description","$page","$description","mounted","currentMetaTags","updateMeta","methods","document","documentElement","userMeta","frontmatter","meta","slice","useGlobalDescription","filter","m","name","length","push","content","descriptionMetas","querySelectorAll","forEach","add","updateMetaTags","watch","beforeDestroy","current","c","head","removeChild","map","tag","createElement","key","setAttribute","appendChild"],"mappings":";;;;;;;;AAAA,eAAe;AACbA,EAAAA,OADa,qBACF;AACT,QAAI,KAAKC,WAAT,EAAsB;AACpB,WAAKA,WAAL,CAAiBC,KAAjB,GAAyB,KAAKC,MAA9B;AACA,WAAKF,WAAL,CAAiBG,IAAjB,GAAwB,KAAKC,KAA7B;AACA,WAAKJ,WAAL,CAAiBK,WAAjB,GAA+B,KAAKC,KAAL,CAAWD,WAAX,IAA0B,KAAKE,YAA9D;AACD;AACF,GAPY;AASbC,EAAAA,OATa,qBASF;AACT;AACA,SAAKC,eAAL,GAAuB,UAAvB;AACA,SAAKC,UAAL;AACD,GAbY;AAebC,EAAAA,OAAO,EAAE;AACPD,IAAAA,UADO,wBACO;AAAA;;AACZE,MAAAA,QAAQ,CAACX,KAAT,GAAiB,KAAKC,MAAtB;AACAU,MAAAA,QAAQ,CAACC,eAAT,CAAyBV,IAAzB,GAAgC,KAAKC,KAArC;AACA,UAAMU,QAAQ,GAAG,KAAKR,KAAL,CAAWS,WAAX,CAAuBC,IAAvB,IAA+B,EAAhD;AACA,UAAMA,IAAI,GAAGF,QAAQ,CAACG,KAAT,CAAe,CAAf,CAAb;AACA,UAAMC,oBAAoB,GAAGJ,QAAQ,CAACK,MAAT,CAAgB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,IAAF,KAAW,aAAf;AAAA,OAAjB,EAA+CC,MAA/C,KAA0D,CAAvF,CALY,CAOZ;;AACA,UAAIJ,oBAAJ,EAA0B;AACxBF,QAAAA,IAAI,CAACO,IAAL,CAAU;AAAEF,UAAAA,IAAI,EAAE,aAAR;AAAuBG,UAAAA,OAAO,EAAE,KAAKjB;AAArC,SAAV;AACD,OAVW,CAYZ;;;AACA,UAAMkB,gBAAgB,GAAGb,QAAQ,CAACc,gBAAT,CAA0B,0BAA1B,CAAzB;;AACA,UAAID,gBAAgB,CAACH,MAArB,EAA6B;AAC3BG,QAAAA,gBAAgB,CAACE,OAAjB,CAAyB,UAAAP,CAAC;AAAA,iBAAI,KAAI,CAACX,eAAL,CAAqBmB,GAArB,CAAyBR,CAAzB,CAAJ;AAAA,SAA1B;AACD;;AAED,WAAKX,eAAL,GAAuB,SAAQoB,cAAc,CAACb,IAAD,EAAO,KAAKP,eAAZ,CAAtB,CAAvB;AACD;AApBM,GAfI;AAsCbqB,EAAAA,KAAK,EAAE;AACLxB,IAAAA,KADK,mBACI;AACP,WAAKI,UAAL;AACD;AAHI,GAtCM;AA4CbqB,EAAAA,aA5Ca,2BA4CI;AACfF,IAAAA,cAAc,CAAC,IAAD,EAAO,KAAKpB,eAAZ,CAAd;AACD;AA9CY,CAAf;;AAiDA,SAASoB,cAAT,CAAyBb,IAAzB,EAA+BgB,OAA/B,EAAwC;AACtC,MAAIA,OAAJ,EAAa;AACX,uBAAIA,OAAJ,EAAaL,OAAb,CAAqB,UAAAM,CAAC,EAAI;AACxBrB,MAAAA,QAAQ,CAACsB,IAAT,CAAcC,WAAd,CAA0BF,CAA1B;AACD,KAFD;AAGD;;AACD,MAAIjB,IAAJ,EAAU;AACR,WAAOA,IAAI,CAACoB,GAAL,CAAS,UAAAhB,CAAC,EAAI;AACnB,UAAMiB,GAAG,GAAGzB,QAAQ,CAAC0B,aAAT,CAAuB,MAAvB,CAAZ;;AACA,mBAAYlB,CAAZ,EAAeO,OAAf,CAAuB,UAAAY,GAAG,EAAI;AAC5BF,QAAAA,GAAG,CAACG,YAAJ,CAAiBD,GAAjB,EAAsBnB,CAAC,CAACmB,GAAD,CAAvB;AACD,OAFD;;AAGA3B,MAAAA,QAAQ,CAACsB,IAAT,CAAcO,WAAd,CAA0BJ,GAA1B;AACA,aAAOA,GAAP;AACD,KAPM,CAAP;AAQD;AACF","sourcesContent":["export default {\n  created () {\n    if (this.$ssrContext) {\n      this.$ssrContext.title = this.$title\n      this.$ssrContext.lang = this.$lang\n      this.$ssrContext.description = this.$page.description || this.$description\n    }\n  },\n\n  mounted () {\n    // update title / meta tags\n    this.currentMetaTags = new Set()\n    this.updateMeta()\n  },\n\n  methods: {\n    updateMeta () {\n      document.title = this.$title\n      document.documentElement.lang = this.$lang\n      const userMeta = this.$page.frontmatter.meta || []\n      const meta = userMeta.slice(0)\n      const useGlobalDescription = userMeta.filter(m => m.name === 'description').length === 0\n\n      // #665 Avoid duplicate description meta at runtime.\n      if (useGlobalDescription) {\n        meta.push({ name: 'description', content: this.$description })\n      }\n\n      // Including description meta coming from SSR.\n      const descriptionMetas = document.querySelectorAll('meta[name=\"description\"]')\n      if (descriptionMetas.length) {\n        descriptionMetas.forEach(m => this.currentMetaTags.add(m))\n      }\n\n      this.currentMetaTags = new Set(updateMetaTags(meta, this.currentMetaTags))\n    }\n  },\n\n  watch: {\n    $page () {\n      this.updateMeta()\n    }\n  },\n\n  beforeDestroy () {\n    updateMetaTags(null, this.currentMetaTags)\n  }\n}\n\nfunction updateMetaTags (meta, current) {\n  if (current) {\n    [...current].forEach(c => {\n      document.head.removeChild(c)\n    })\n  }\n  if (meta) {\n    return meta.map(m => {\n      const tag = document.createElement('meta')\n      Object.keys(m).forEach(key => {\n        tag.setAttribute(key, m[key])\n      })\n      document.head.appendChild(tag)\n      return tag\n    })\n  }\n}\n"]}]}