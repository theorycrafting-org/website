{"remainingRequest":"D:\\vp2\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\vp2\\node_modules\\@vuepress\\core\\lib\\app\\redirect.js","dependencies":[{"path":"D:\\vp2\\node_modules\\@vuepress\\core\\lib\\app\\redirect.js","mtime":1549712920177},{"path":"D:\\vp2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547842182214},{"path":"D:\\vp2\\node_modules\\babel-loader\\lib\\index.js","mtime":1547849720006}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/es6.regexp.replace\";\n// In VuePress, we have following convention about routing:\n//\n//   - `/foo/` means source file is `/foo/{README|index}.md`\n//   - `/foo.html` means your source file is `/foo.md`\n//\n// The original design of VuePress relied on above two styles\n// of routing, especially the calculation involved of routes at\n// default theme. so we can't easily modify `/foo.html` directly\n// to `/foo` (i.e. remove html suffix)\n//\n// This \"temporary\" utility handles redirect of clean urls, with\n// this utility, you'll get:\n//\n// For unknown request `/foo`\n//   - redirect to `/foo.html` if it exists\n//   - redirect to `/foo/` if it exists\n//\n// For unknown request `/foo/`\n//   - redirect to `/foo.html` if it exists\n//\n// If all the above redirect rules don't exist, you'll get a 404\nexport function handleRedirectForCleanUrls(router) {\n  router.beforeEach(function (to, from, next) {\n    if (isRouteExists(router, to.path)) {\n      next();\n    } else {\n      if (!/(\\/|\\.html)$/.test(to.path)) {\n        var endingSlashUrl = to.path + '/';\n        var endingHtmlUrl = to.path + '.html';\n\n        if (isRouteExists(router, endingHtmlUrl)) {\n          next(endingHtmlUrl);\n        } else if (isRouteExists(router, endingSlashUrl)) {\n          next(endingSlashUrl);\n        } else {\n          next();\n        }\n      } else if (/\\/$/.test(to.path)) {\n        var _endingHtmlUrl = to.path.replace(/\\/$/, '') + '.html';\n\n        if (isRouteExists(router, _endingHtmlUrl)) {\n          next(_endingHtmlUrl);\n        } else {\n          next();\n        }\n      } else {\n        next();\n      }\n    }\n  });\n}\n\nfunction isRouteExists(router, path) {\n  return router.options.routes.filter(function (route) {\n    return route.path === path;\n  }).length > 0;\n}",null]}